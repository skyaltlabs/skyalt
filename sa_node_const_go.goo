type Text struct {
	Grid_x      int    `json:"grid_x"`
	Grid_y      int    `json:"grid_y"`
	Grid_w      int    `json:"grid_w"`
	Grid_h      int    `json:"grid_h"`
	Show   bool   `json:"show"`
	Label       string `json:"label"`
	Align_h     int    `json:"align_h"`
	Align_v     int    `json:"align_v"`
	Multi_line  bool   `json:"multi_line"`
	Selection   bool   `json:"selection"`
	Show_border bool   `json:"show_border"`
}
type Editbox struct {
	Grid_x                  int    `json:"grid_x"`
	Grid_y                  int    `json:"grid_y"`
	Grid_w                  int    `json:"grid_w"`
	Grid_h                  int    `json:"grid_h"`
	Show                    bool   `json:"show"`
	Value                   string `json:"value"`
	Ghost                   string `json:"ghost"`
	Align_h                 int    `json:"align_h"`
	Align_v                 int    `json:"align_v"`
	Enable                  bool   `json:"enable"`
	Multi_line              bool   `json:"multi_line"`
	Multi_line_enter_finish bool   `json:"multi_line_enter_finish"`
	Temp_to_value           bool   `json:"temp_to_value"`
	Db_value 				bool   `json:"db_value"`
}
type EditboxDB struct {
	Grid_x int    `json:"grid_x"`
	Grid_y int    `json:"grid_y"`
	Grid_w int    `json:"grid_w"`
	Grid_h int    `json:"grid_h"`
	Show   bool   `json:"show"`
	Value                   string `json:"value"`
	Ghost                   string `json:"ghost"`
	Align_h                 int    `json:"align_h"`
	Align_v                 int    `json:"align_v"`
	Enable                  bool   `json:"enable"`
	Multi_line              bool   `json:"multi_line"`
	Multi_line_enter_finish bool   `json:"multi_line_enter_finish"`
	Temp_to_value           bool   `json:"temp_to_value"`
	Db_value 				bool   `json:"db_value"`
}
func (db *EditboxDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Button struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Background int  `json:"background"`
	Label   string `json:"label"`
	Icon    string `json:"icon"`
	Icon_margin    float64 `json:"icon_margin"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Triggered bool   `json:"triggered"`
	Confirmation string   `json:"confirmation"`
}
type Checkbox struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   bool   `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
}
type CheckboxDB struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   string `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Db_value bool   `json:"db_value"`
}
func (db *CheckboxDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Switch struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   bool   `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
}
type SwitchDB struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   string  `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Db_value bool   `json:"db_value"`
}
func (db *SwitchDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Slider struct {
	Grid_x  int     `json:"grid_x"`
	Grid_y  int     `json:"grid_y"`
	Grid_w  int     `json:"grid_w"`
	Grid_h  int     `json:"grid_h"`
	Show    bool    `json:"show"`
	Value   float64 `json:"value"`
	Min     float64 `json:"min"`
	Max     float64 `json:"max"`
	Step    float64 `json:"step"`
	Tooltip string  `json:"tooltip"`
	Enable  bool    `json:"enable"`
}
type SliderDB struct {
	Grid_x  int     `json:"grid_x"`
	Grid_y  int     `json:"grid_y"`
	Grid_w  int     `json:"grid_w"`
	Grid_h  int     `json:"grid_h"`
	Show    bool    `json:"show"`
	Value   string  `json:"value"`
	Min     float64 `json:"min"`
	Max     float64 `json:"max"`
	Step    float64 `json:"step"`
	Tooltip string  `json:"tooltip"`
	Enable  bool    `json:"enable"`
	Db_value bool   `json:"db_value"`
}
func (db *SliderDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Combo struct {
	Grid_x         int    `json:"grid_x"`
	Grid_y         int    `json:"grid_y"`
	Grid_w         int    `json:"grid_w"`
	Grid_h         int    `json:"grid_h"`
	Show           bool   `json:"show"`
	Value          string `json:"value"`
	Options_names  string `json:"options_names"` //separated by ';'
	Options_values string `json:"options_values"` //separated by ';'
	Tooltip        string `json:"tooltip"`
	Enable         bool   `json:"enable"`
}
type ComboDB struct {
	Grid_x         int    `json:"grid_x"`
	Grid_y         int    `json:"grid_y"`
	Grid_w         int    `json:"grid_w"`
	Grid_h         int    `json:"grid_h"`
	Show           bool   `json:"show"`
	Value          string `json:"value"`
	Options_names  string `json:"options_names"` //separated by ';'
	Options_values string `json:"options_values"` //separated by ';'
	Tooltip        string `json:"tooltip"`
	Enable         bool   `json:"enable"`
	Db_value bool   `json:"db_value"`
}
func (db *ComboDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Date struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   int    `json:"value"` //Unix time
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
}

type DateDB struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   string    `json:"value"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Db_value bool   `json:"db_value"`
}
func (db *DateDB) SetValue(db_path, table, column string, rowid int) {
	db.Value = fmt.Sprintf("%s:%s:%s:%d", db_path, table, column, rowid)
}

type Color struct {
	Grid_x  int  `json:"grid_x"`
	Grid_y  int  `json:"grid_y"`
	Grid_w  int  `json:"grid_w"`
	Grid_h  int  `json:"grid_h"`
	Show    bool `json:"show"`
	Value_r int  `json:"value_r"` //<0-255>
	Value_g int  `json:"value_g"` //<0-255>
	Value_b int  `json:"value_b"` //<0-255>
	Value_a int  `json:"value_a"` //<0-255>
	Enable  bool `json:"enable"`
}

type Disk_dir struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
}

type Disk_file struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
}

type Db_file struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
	Init_sql  string `json:"init_sql"`
	Show_path        bool   `json:"show_path"`
	Show_table_list  bool   `json:"show_table_list"`
	Selected_table   string   `json:"selected_table"`
}

type Microphone struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Enable    bool   `json:"enable"`
	Path      string `json:"path"`
	Triggered bool   `json:"triggered"`
}

type Map struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Enable    bool   `json:"enable"`

	Lon    float64    `json:"lon"`
	Lat    float64    `json:"lat"`
	Zoom   float64    `json:"zoom"`

	File   string    `json:"file"`
	Url    string    `json:"url"`
	copyright       string    `json:"copyright"`
	copyright_url   string    `json:"copyright_url"`

	Locators   string    `json:"locators"`
	Segments   string    `json:"segments"`
}

type ChartItem struct {
	X float64    `json:"x"`
	Y float64    `json:"y"`
	Label string `json:"label"`
}
type Chart struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Enable    bool   `json:"enable"`

	Values    string    `json:"values"`
	//Values  []*ChartItem `json:"values"`
	Typee     string    `json:"typee"`

	Cd_r int  `json:"cd_r"` //<0-255>
	Cd_g int  `json:"cd_g"` //<0-255>
	Cd_b int  `json:"cd_b"` //<0-255>
	Cd_a int  `json:"cd_a"` //<0-255>

	Left_margin    float64    `json:"left_margin"`
	Bottom_margin  float64    `json:"bottom_margin"`

	Point_rad  float64    `json:"point_rad"`
	Line_thick  float64    `json:"line_thick"`

	X_unit  string    `json:"x_unit"`
	Y_unit  string    `json:"y_unit"`

	Bound_x0  bool    `json:"bound_x0"`
	Bound_y0  bool    `json:"bound_y0"`

	Column_margin  float64    `json:"column_margin"`
}
/*func (c *Chart)ClearItems() {
	c.Values = nil
}
func (c *Chart)AddItem(x, y float64, label string) {
	c.Values = append(c.Values, &ChartItem{X:x, Y:y, Label: label})
}*/

type Net struct {
	Node     string `json:"node"`
	File_path string `json:"file_path"`
	Url string `json:"url"`
}

func (net *Net) DownloadFile(filePath string, url string) error {
	net.File_path = filePath
	net.Url = url

	js, err := json.Marshal(net)
	if err != nil {
		return fmt.Errorf("Marshal() failed: %w", err)
	}

	_, err = _send("net", js)
	return err
}

type Whispercpp struct {
	Node      string `json:"node"`
	File_path string `json:"file_path"`
	Data      []byte `json:"data"`
}

func (w *Whispercpp) TranscribeBlob(data []byte) (string, error) {
	w.File_path = "blob"
	w.Data = data

	js, err := json.Marshal(w)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("whispercpp", js)
	return string(resBody), err
}

func (w *Whispercpp) TranscribeFile(filePath string) (string, error) {
	w.File_path = filePath

	//read file
	var err error
	w.Data, err = os.ReadFile(filePath)
	if err != nil {
		return "", err
	}

	js, err := json.Marshal(w)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("whispercpp", js)
	return string(resBody), err
}

type LlamaMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}
type Llamacpp struct {
	Node   string `json:"node"`
	Messages []LlamaMessage `json:"messages"`
}

func (ll *Llamacpp) GetAnswer(messages []LlamaMessage) (string, error) {
	ll.Messages = messages

	js, err := json.Marshal(ll)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("llamacpp", js)
	return string(resBody), err
}

type OpenaiMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}
type Openai struct {
	Node     string       `json:"node"`
	Messages []OpenaiMessage `json:"messages"`
}

func (gf *Openai) GetAnswer(messages []OpenaiMessage) (string, error) {
	gf.Messages = messages

	js, err := json.Marshal(gf)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("openai", js)
	return string(resBody), err
}

func _send(url string, js []byte) ([]byte, error) {

	body := bytes.NewReader([]byte(js))

	req, err := http.NewRequest(http.MethodPost, G_SERVER_ADDR+url, body)
	if err != nil {
		return nil, fmt.Errorf("NewRequest() failed: %w", err)
	}
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer "+G_JOB)


	client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Do() failed: %w", err)
	}
	defer res.Body.Close()
	
	resBody, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, fmt.Errorf("ReadAll() failed: %w", err)
	}

	if res.StatusCode != 200 {
		return nil, fmt.Errorf("statusCode != 200, response: %s", resBody)
	}

	return resBody, nil
}

var G_SERVER_ADDR = "http://127.0.0.1:8080/"
var G_JOB = ""

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Missing <port> <job_id>")
		return
	}

	G_PORT, err := strconv.Atoi(os.Args[1])
	if err != nil {
		fmt.Println("Port:", err)
		return
	}

	G_JOB = os.Args[2]
	if G_JOB == "" {
		fmt.Println("Missing G_JOB")
		return
	}

	G_SERVER_ADDR = fmt.Sprintf("http://127.0.0.1:%d/", G_PORT)

	job, err := _send("getjob", []byte("{}"))
	if err != nil {
		fmt.Println("_send() failed:", err)
		return
	}

	jobBack, err := _callIt(job)
	if err != nil {
		_, err = _send("returnerror", []byte(err.Error()))
		if err != nil {
			fmt.Println("_send() failed:", err)
			return
		}
	}else{
		_, err = _send("returnresult", jobBack)
		if err != nil {
			fmt.Println("_send() failed:", err)
			return
		}
	}
}
