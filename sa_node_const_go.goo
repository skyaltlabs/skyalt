type Text struct {
	Grid_x      int    `json:"grid_x"`
	Grid_y      int    `json:"grid_y"`
	Grid_w      int    `json:"grid_w"`
	Grid_h      int    `json:"grid_h"`
	Show   bool   `json:"show"`
	Label       string `json:"label"`
	Align_h     int    `json:"align_h"`
	Align_v     int    `json:"align_v"`
	Multi_line  bool   `json:"multi_line"`
	Selection   bool   `json:"selection"`
	Show_border bool   `json:"show_border"`
}
type Editbox struct {
	Grid_x                  int    `json:"grid_x"`
	Grid_y                  int    `json:"grid_y"`
	Grid_w                  int    `json:"grid_w"`
	Grid_h                  int    `json:"grid_h"`
	Show               bool   `json:"show"`
	Value                   string `json:"value"`
	Ghost                   string `json:"ghost"`
	Align_h                 int    `json:"align_h"`
	Align_v                 int    `json:"align_v"`
	Enable                  bool   `json:"enable"`
	Multi_line              bool   `json:"multi_line"`
	Multi_line_enter_finish bool   `json:"multi_line_enter_finish"`
	Finished                bool   `json:"finished"`
}
type Button struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Clicked bool   `json:"clicked"`
}
type Checkbox struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   bool   `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Changed bool   `json:"changed"`
}
type Switch struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   bool   `json:"value"`
	Label   string `json:"label"`
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Changed bool   `json:"changed"`
}
type Slider struct {
	Grid_x  int     `json:"grid_x"`
	Grid_y  int     `json:"grid_y"`
	Grid_w  int     `json:"grid_w"`
	Grid_h  int     `json:"grid_h"`
	Show    bool    `json:"show"`
	Value   float64 `json:"value"`
	Min     float64 `json:"min"`
	Max     float64 `json:"max"`
	Step    float64 `json:"step"`
	Tooltip string  `json:"tooltip"`
	Enable  bool    `json:"enable"`
	Changed bool    `json:"changed"`
}
type Combo struct {
	Grid_x         int    `json:"grid_x"`
	Grid_y         int    `json:"grid_y"`
	Grid_w         int    `json:"grid_w"`
	Grid_h         int    `json:"grid_h"`
	Show           bool   `json:"show"`
	Value          string `json:"value"`
	Options_names  string `json:"options_names"` //separated by ';'
	Options_values string `json:"options_values"` //separated by ';'
	Tooltip        string `json:"tooltip"`
	Enable         bool   `json:"enable"`
	Changed        bool   `json:"changed"`
}
type Date struct {
	Grid_x  int    `json:"grid_x"`
	Grid_y  int    `json:"grid_y"`
	Grid_w  int    `json:"grid_w"`
	Grid_h  int    `json:"grid_h"`
	Show    bool   `json:"show"`
	Value   int    `json:"value"` //Unix time
	Tooltip string `json:"tooltip"`
	Enable  bool   `json:"enable"`
	Changed bool   `json:"changed"`
}
type Color struct {
	Grid_x  int  `json:"grid_x"`
	Grid_y  int  `json:"grid_y"`
	Grid_w  int  `json:"grid_w"`
	Grid_h  int  `json:"grid_h"`
	Show    bool `json:"show"`
	Value_r int  `json:"value_r"` //<0-255>
	Value_g int  `json:"value_g"` //<0-255>
	Value_b int  `json:"value_b"` //<0-255>
	Value_a int  `json:"value_a"` //<0-255>
	Enable  bool `json:"enable"`
	Changed bool `json:"changed"`
}

type Disk_dir struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
	Changed   bool   `json:"changed"`
}

type Disk_file struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
	Changed   bool   `json:"changed"`
}

type Sqlite struct {
	Grid_x    int    `json:"grid_x"`
	Grid_y    int    `json:"grid_y"`
	Grid_w    int    `json:"grid_w"`
	Grid_h    int    `json:"grid_h"`
	Show      bool   `json:"show"`
	Path      string `json:"path"`
	Selected_table string `json:"selected_table"`
	Write     bool   `json:"write"`
	Enable    bool   `json:"enable"`
	Changed   bool   `json:"changed"`
}

type Whisper_cpp struct {
	Node      string `json:"node"`
	File_path string `json:"file_path"`
	Data      []byte `json:"data"`
}

func (w *Whisper_cpp) Translate(filePath string) (string, error) {
	w.File_path = filePath

	//find
	var err error
	w.Data, err = os.ReadFile(filePath)
	if err != nil {
		return "", err
	}

	js, err := json.Marshal(w)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("whisper", js)
	return string(resBody), err
}

type LlamaMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}
type LlamaCpp struct {
	Node   string `json:"node"`
	Messages []LlamaMessage `json:"messages"`
}

func (ll *LlamaCpp) GetAnswer(messages []LlamaMessage) (string, error) {
	ll.Messages = messages

	js, err := json.Marshal(ll)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("llama", js)
	return string(resBody), err
}

type OpenaiMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}
type Openai struct {
	Node     string       `json:"node"`
	Messages []OpenaiMessage `json:"messages"`
}

func (gf *Openai) GetAnswer(messages []OpenaiMessage) (string, error) {
	gf.Messages = messages

	js, err := json.Marshal(gf)
	if err != nil {
		return "", fmt.Errorf("Marshal() failed: %w", err)
	}

	resBody, err := _send("openai", js)
	return string(resBody), err
}

func _send(url string, js []byte) ([]byte, error) {

	body := bytes.NewReader([]byte(js))

	req, err := http.NewRequest(http.MethodPost, G_SERVER_ADDR+url, body)
	if err != nil {
		return nil, fmt.Errorf("NewRequest() failed: %w", err)
	}
	req.Header.Add("Content-Type", "application/json")

	client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Do() failed: %w", err)
	}

	resBody, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, fmt.Errorf("ReadAll() failed: %w", err)
	}

	if res.StatusCode != 200 {
		return nil, fmt.Errorf("statusCode != 200, response: %s", resBody)
	}

	return resBody, nil
}

var G_SERVER_ADDR = "http://127.0.0.1:8080/"

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Missing <port>")
		return
	}

	G_PORT, err := strconv.Atoi(os.Args[1])
	if err != nil {
		fmt.Println(err)
		return
	}

	G_SERVER_ADDR = fmt.Sprintf("http://127.0.0.1:%d/", G_PORT)

	//fmt.Println("Asking for job . . .")
	job, err := _send("getjob", []byte("{}"))
	if err != nil {
		fmt.Println("_send() failed:", err)
		return
	}

	//fmt.Println("Running for job . . .")
	jobBack, err := _callIt(job)
	if err != nil {
		jobBack = []byte(err.Error()) //only string, no {}
	}

	//fmt.Println("Sending job . . .")
	_, err = _send("setresult", jobBack)
	if err != nil {
		fmt.Println("_send() failed:", err)
		return
	}

	//fmt.Println("Done")
}
