type Text struct {
	Label string
}

type Editbox struct {
	Value    string
	Enable   bool
}

type EditboxDB struct {
	Db_path string
	Table string
	Column string
	Rowid int

	Enable   bool
}
//EditboxDB doesn't have 'Value string' attribute. Instead use this function to set path to database, where value can be read/write.
func (edit *EditboxDB) SetValue(db_path string, table string, column string, rowid int) {
	edit.Db_path = db_path
	edit.Table = table
	edit.Column = column
	edit.Rowid = rowid
}

type Button struct {
	Label   string
	Enable  bool
	Background  int	//0=transparent, 1=full, 2=light
	Triggered bool	//true, when button is clicked
}

type Checkbox struct {
	Value   bool
	Label   string
	Enable  bool
}

type Switch struct {
	Value   bool
	Label   string
	Enable  bool
}

type Slider struct {
	Value   float64
	Min     float64
	Max     float64
	Step    float64
	Enable  bool
}

type Combo struct {
	Value          string
	Options_names  string //separated by ';'
	Options_values string //separated by ';'
	Enable         bool
}

type Date struct {
	Value   int //Unix time
	Enable  bool
}

type Color struct {
	Value_r int //<0-255>
	Value_g int //<0-255>
	Value_b int //<0-255>
	Value_a int //<0-255>
	Enable  bool
}

type Disk_dir struct {
	Path  string
	Write bool
}
type Disk_file struct {
	Path  string
	Write bool
}

type Tables struct {
	Path  string
	Write bool
}

type Microphone struct {
	Path  string	//path to the file with recorded audio
	Triggered bool	//true, when recording is done
	Enable  bool
}

type Map struct {
	Locators string	//XML(GPX) or JSON format: [{"label":"LocatorA", "lon":14.4, "lat":50.0}, {"label":"LocatorB", "lon":14.5, "lat":50.1}]
	Segments string	//XML(GPX) or JSON format: [{"label":"SegmentA", "Trkpt":[{"lat":50,"lon":16,"ele":400,"time":"2020-04-15T09:05:20Z"},{"lat":50.4,"lon":16.1,"ele":400,"time":"2020-04-15T09:05:23Z"}]}]

	Enable  bool
}

type Net struct {
}
func (net *Net) DownloadFile(dst_file string, src_addr string) error {
	//TODO
	return nil
}

type Whispercpp struct {
	Model string
}
func (w *Whispercpp) TranscribeBlob(data []byte) (string, error) {
	//TODO
	return text
}
func (w *Whispercpp) TranscribeFile(filePath string) (string, error) {
	//TODO
	return text
}

type LlamaMessage struct {
	Role    string	//"system", "user", "assistant"
	Content string
}
type Llamacpp struct {
	Model string
}
func (ll *Llamacpp) GetAnswer(messages []LlamaMessage) (string, error) {
	//TODO
	return answer
}

type OpenaiMessage struct {
	Role    string	//"system", "user", "assistant"
	Content string
}
type Openai struct {
	Model string
}
func (oai *Openai) GetAnswer(messages []OpenaiMessage) (string, error) {
	//TODO
	return answer
}
