{
"Pos": {
"X": 0,
"Y": 0
},
"Name": "root",
"Exe": "layout",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"grid_h": 0,
"grid_w": 0,
"grid_x": 0,
"grid_y": 0,
"show": true
},
"Cols": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 1,
"Resize": 1
},
{
"Pos": 2,
"Min": 1,
"Max": 20,
"Resize": 1
},
{
"Pos": 3,
"Min": 1,
"Max": 3,
"Resize": 1
},
{
"Pos": 4,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Rows": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 15,
"Resize": 1
},
{
"Pos": 2,
"Min": 1,
"Max": 2,
"Resize": 1
},
{
"Pos": 3,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": -2.8113258,
"Y": 18.248018
},
"Name": "whispercpp",
"Exe": "whispercpp",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"beam_size": -1,
"best_of": 2,
"detect_language": false,
"diarize": false,
"duration": 0,
"entropy_thold": 2.4,
"language": "",
"logprob_thold": -1,
"max_context": -1,
"max_len": 0,
"model": "ggml-tiny",
"no_timestamps": false,
"offset_n": 0,
"offset_t": 0,
"response_format": "text",
"show": true,
"split_on_word": false,
"temperature": 0,
"temperature_inc": 0.2,
"tinydiarize": false,
"translate": false,
"word_thold": 0.01
},
"ShowCodeChat": false
},
{
"Pos": {
"X": -6.1928916,
"Y": 16.657661
},
"Name": "microphone",
"Exe": "microphone",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 2,
"path": "apps/chat/mic.wav",
"show": true
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 22.915314,
"Y": 18.077469
},
"Name": "db",
"Exe": "db_file",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": true,
"grid_h": 1,
"grid_w": 3,
"grid_x": 0,
"grid_y": 0,
"init_sql": "CREATE TABLE IF NOT EXISTS chat (role TEXT, content TEXT);\n",
"path": "apps/chat/chat.sqlite",
"selected_table": "chat",
"show": false,
"show_path": true,
"show_table_list": true,
"write": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 17.402346,
"Y": 18.111866
},
"Name": "llamacpp",
"Exe": "llamacpp",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"cache_prompt": false,
"dynatemp_exponent": 1,
"dynatemp_range": 0,
"frequency_penalty": 0,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"min_p": 0.05,
"mirostat": false,
"mirostat_eta": 0.1,
"mirostat_tau": 5,
"model": "llama-2-7b.Q5_K_M.gguf",
"n_predict": 400,
"n_probs": 0,
"presence_penalty": 0,
"repeat_last_n": 256,
"repeat_penalty": 1.18,
"seed": -1,
"show": true,
"slot_id": -1,
"temperature": 0.8,
"tfs_z": 1,
"top_k": 40,
"top_p": 0.5,
"typical_p": 1
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 11.666904,
"Y": 16.598389
},
"Name": "button",
"Exe": "button",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"background": 1,
"confirmation": "",
"enable": false,
"grid_h": 1,
"grid_w": 1,
"grid_x": 3,
"grid_y": 2,
"icon": "",
"icon_margin": 0.15,
"label": "Send",
"show": true,
"tooltip": ""
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 4.6560984,
"Y": 16.70277
},
"Name": "user_msg",
"Exe": "editbox",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 0,
"align_v": 0,
"db_value": false,
"enable": true,
"ghost": "",
"grid_h": 1,
"grid_w": 1,
"grid_x": 2,
"grid_y": 2,
"line_wrapping": true,
"multi_line": true,
"multi_line_enter_finish": true,
"show": true,
"temp_to_value": true,
"value": ""
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 26.89859,
"Y": 16.540775
},
"Name": "text",
"Exe": "text",
"Selected": true,
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 0,
"align_v": 0,
"grid_h": 1,
"grid_w": 3,
"grid_x": 1,
"grid_y": 1,
"label": "user: What is the biggest city in the Czech Republic?\nassistant: The biggest city in the Czech Republic is Prague. It has a population of over 1.3 million people and is the capital of the country.\nuser: What is the 2nd city?\nassistant: The second largest city in the Czech Republic is Brno, with a population of over 380,000 people. It is located in the south-east of the country and is known for its historic buildings and universities\nuser: What is the 3rd?\nassistant: The third largest city in the Czech Republic is Ostrava, with a population of over 280,000 people. It is located in the north-east of the country and is known for its coal mining industry\nuser: 4th?\nassistant: The fourth largest city in the Czech Republic is Pilsen, with a population of over 180,000 people. It is located in the west-central part of the country and is known for its brewery industry\n",
"line_wrapping": true,
"multi_line": true,
"selection": true,
"show": true,
"show_border": true
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 1.2612612,
"Y": 24.774773
},
"Name": "exe",
"Exe": "exe",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"show": true
},
"Subs": [
{
"Pos": {
"X": 1.2612612,
"Y": 24.774773
},
"Name": "transcribe_mic",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "Transcribe 'microphone' with 'whispercpp'. Save result into 'user_msg'.",
"Assistent": "```go\nimport (\n\t\"errors\"\n\t\"io/ioutil\"\n)\n\nfunc transcribe_mic(microphone *Microphone, whispercpp *Whispercpp, user_msg *Editbox) error {\n\tif !microphone.Enable || !microphone.Triggered {\n\t\treturn errors.New(\"microphone is not enabled or not triggered\")\n\t}\n\n\tdata, err := ioutil.ReadFile(microphone.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresult, err := whispercpp.TranscribeBlob(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tuser_msg.Value = result\n\tuser_msg.Enable = true\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"io/ioutil\"\n)\n\nfunc transcribe_mic(microphone *Microphone, whispercpp *Whispercpp, user_msg *Editbox) error {\n\tif !microphone.Enable || !microphone.Triggered {\n\t\treturn nil // Do nothing if microphone is not enabled and triggered\n\t}\n\taudioBytes, err := ioutil.ReadFile(microphone.Path)\n\tif err != nil {\n\t\treturn err // Return the error if reading file fails\n\t}\n\ttranscribedText, err := whispercpp.TranscribeBlob(audioBytes)\n\tif err != nil {\n\t\treturn err // Return the error if transcription fails\n\t}\n\tuser_msg.Value = transcribedText // Update user_msg with the transcribed text\n\treturn nil\n}\n",
"ArgsProps": [
{
"Node": "microphone",
"Write": false
},
{
"Node": "whispercpp",
"Write": false
},
{
"Node": "user_msg",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 8.774775,
"Y": 24.774773
},
"Name": "disable",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "If 'user_msg' is empty, disable 'button'. Otherwise button is enabled.",
"Assistent": "```go\nimport (\n\t\"errors\"\n)\n\nfunc disable(user_msg *Editbox, button *Button) error {\n\tif user_msg == nil || button == nil {\n\t\treturn errors.New(\"nil argument\")\n\t}\n\tif user_msg.Value == \"\" {\n\t\tbutton.Enable = false\n\t} else {\n\t\tbutton.Enable = true\n\t}\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"errors\"\n)\n\nfunc disable(user_msg *Editbox, button *Button) error {\n\tif user_msg == nil || button == nil {\n\t\treturn errors.New(\"nil argument\")\n\t}\n\tif user_msg.Value == \"\" {\n\t\tbutton.Enable = false\n\t} else {\n\t\tbutton.Enable = true\n\t}\n\treturn nil\n}\n",
"ArgsProps": [
{
"Node": "user_msg",
"Write": false
},
{
"Node": "button",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 15.774775,
"Y": 24.774773
},
"Name": "chat",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "If 'button' is clicked, build messages from 'db'. Add 'user_msg' to messages and send it to 'llamacpp' to get answer.\nSave answer and 'user_msg' into 'db'. Reset 'user_msg' editbox.",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc chat(button *Button, db *Db_file, user_msg *Editbox, llamacpp *Llamacpp) error {\n\tif button.Triggered {\n\t\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tmessages := []string{}\n\t\trows, err := conn.Query(\"SELECT content FROM chat\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer rows.Close()\n\n\t\tfor rows.Next() {\n\t\t\tvar message string\n\t\t\tif err := rows.Scan(\u0026message); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmessages = append(messages, message)\n\t\t}\n\n\t\tmessages = append(messages, user_msg.Value)\n\t\tanswer := llamacpp.Send(messages)\n\t\tuser_msg.Value = \"\"\n\n\t\ttx, err := conn.Begin()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tx.Exec(\"INSERT INTO chat (role, content) VALUES (?, ?)\", \"user\", user_msg.Value)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tx.Exec(\"INSERT INTO chat (role, content) VALUES (?, ?)\", \"llama\", answer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbutton.Triggered = false\n\t}\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc chat(button *Button, db *Db_file, user_msg *Editbox, llamacpp *Llamacpp) error {\n\tif button.Triggered {\n\t\tdatabase, err := sql.Open(\"sqlite3\", db.Path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer database.Close()\n\n\t\trows, err := database.Query(\"SELECT role, content FROM chat\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer rows.Close()\n\n\t\tvar messages []LlamaMessage\n\t\tfor rows.Next() {\n\t\t\tvar role, content string\n\t\t\tif err := rows.Scan(\u0026role, \u0026content); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmessages = append(messages, LlamaMessage{Role: role, Content: content})\n\t\t}\n\t\tif err := rows.Err(); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tuserMessage := LlamaMessage{Role: \"user\", Content: user_msg.Value}\n\t\tmessages = append(messages, userMessage)\n\n\t\tanswer, err := llamacpp.GetAnswer(messages)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\ttx, err := database.Begin()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tstmt, err := tx.Prepare(\"INSERT INTO chat(role, content) VALUES(?, ?)\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer stmt.Close()\n\n\t\t_, err = stmt.Exec(\"user\", user_msg.Value)\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = stmt.Exec(\"assistant\", answer)\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn err\n\t\t}\n\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tuser_msg.Value = \"\" // Reset user message editbox after sending\n\n\t\tfmt.Printf(\"The assistant's answer is: %s\\n\", answer)\n\t}\n\treturn nil\n}\n",
"ArgsProps": [
{
"Node": "button",
"Write": false
},
{
"Node": "db_file",
"Write": false
},
{
"Node": "user_msg",
"Write": false
},
{
"Node": "llamacpp",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 22.774775,
"Y": 24.774773
},
"Name": "build_output",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "From 'db' create text in form: \u003crole\u003e: \u003ccontent\u003e\\n.  Save text into 'text'.",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc build_output(db *Db_file, text *Text) error {\n\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\trows, err := conn.Query(\"SELECT role, content FROM chat\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tresult := \"\"\n\tfor rows.Next() {\n\t\tvar role, content string\n\t\tif err := rows.Scan(\u0026role, \u0026content); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresult += fmt.Sprintf(\"%s: %s\\n\", role, content)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn err\n\t}\n\n\ttext.Label = result\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc build_output(db *Db_file, text *Text) error {\n\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\trows, err := conn.Query(\"SELECT role, content FROM chat\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tresult := \"\"\n\tfor rows.Next() {\n\t\tvar role, content string\n\t\tif err := rows.Scan(\u0026role, \u0026content); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresult += fmt.Sprintf(\"%s: %s\\n\", role, content)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn err\n\t}\n\n\ttext.Label = result\n\treturn nil\n}\n",
"ArgsProps": [
{
"Node": "db_file",
"Write": false
},
{
"Node": "text",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
}
],
"ShowCodeChat": false
}
],
"ShowCodeChat": false
}