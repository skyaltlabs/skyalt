{
"Pos": {
"X": 0,
"Y": 0
},
"Name": "root",
"Exe": "layout",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"grid_h": 0,
"grid_w": 0,
"grid_x": 0,
"grid_y": 0,
"show": true
},
"Cols": [
{
"Pos": 0,
"Min": 2,
"Max": 10,
"Resize": 5.27027027027027,
"ResizeName": "sz"
},
{
"Pos": 1,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Rows": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": 16.15315,
"Y": 9.286571
},
"Name": "layout",
"Exe": "layout",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"show": true,
"write": false
},
"Cols": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 3,
"Resize": 1
}
],
"Rows": [
{
"Pos": 2,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 3,
"Min": 1,
"Max": 1,
"Resize": 1
},
{
"Pos": 4,
"Min": 1,
"Max": 10,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": 20.811605,
"Y": 9.223016
},
"Name": "elev_chart",
"Exe": "chart",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"bottom_margin": 1.2,
"bound_x0": true,
"bound_y0": false,
"cd_a": 255,
"cd_b": 181,
"cd_g": 181,
"cd_r": 42,
"column_margin": 0.1,
"enable": true,
"grid_h": 1,
"grid_w": 2,
"grid_x": 0,
"grid_y": 4,
"left_margin": 2,
"line_thick": 0.03,
"point_rad": 0.03,
"show": true,
"typee": "lines",
"values": "[]",
"x_unit": "km",
"y_unit": "m"
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 15.485414,
"Y": 10.930073
},
"Name": "typee",
"Exe": "combo",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"db_value": true,
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"options_names": "run;ride;walk;hike;swim",
"options_values": "run;ride;walk;hike;swim",
"search": false,
"show": true,
"tooltip": "",
"value": "apps/running/db.sqlite:activities:type:1"
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 15.410443,
"Y": 12.858966
},
"Name": "mapp",
"Exe": "map",
"Selected": true,
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"copyright": "(c)OpenStreetMap contributors",
"copyright_url": "https://www.openstreetmap.org/copyright",
"enable": true,
"file": "temp/maps/osm.sqlite",
"grid_h": 1,
"grid_w": 2,
"grid_x": 0,
"grid_y": 2,
"lat": 50.443752190662686,
"locators": "",
"lon": 16.118123531341553,
"segments": "",
"show": true,
"url": "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
"zoom": 15
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 15.392747,
"Y": 9.17975
},
"Name": "title",
"Exe": "editbox",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 0,
"align_v": 1,
"db_value": true,
"enable": true,
"ghost": "",
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"multi_line": false,
"multi_line_enter_finish": false,
"show": true,
"temp_to_value": false,
"value": "apps/running/db.sqlite:activities:title:1"
},
"ShowCodeChat": false
}
],
"ShowCodeChat": false
},
{
"Pos": {
"X": 13.092985,
"Y": -8.320892
},
"Name": "list",
"Exe": "list",
"Code": {
"Messages": [
{
"User": "Copy table \"activities\" from 'run_db' into 'list'.\nSet button label as title column.",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc list(db *Db_file, list *ListList) error {\n\tsqliteDB, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sqliteDB.Close()\n\n\trows, err := sqliteDB.Query(\"SELECT rowid, title FROM activities\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar rowid int\n\t\tvar title string\n\t\tif err := rows.Scan(\u0026rowid, \u0026title); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tnewRow := list.AddRow()\n\t\tnewRow.Rowid.Label = string(rowid)\n\t\tnewRow.Button.Label = title\n\t}\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "func list() error {\n\treturn nil\n}",
"ArgsProps": [
{
"Node": "run_db",
"Write": false
}
]
},
"Attrs": {
"changed": false,
"defRow": {
"button": {
"background": 0,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"label": "Afternoon run",
"show": true,
"tooltip": "",
"triggered": false
},
"context": {
"background": 1,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"label": "",
"show": true,
"tooltip": "",
"triggered": false
},
"rowid": {
"align_h": 1,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 2,
"grid_y": 0,
"label": "2",
"multi_line": false,
"selection": true,
"show": false,
"show_border": false
}
},
"direction": 0,
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"max_height": 1,
"max_width": 100,
"selected_button": "button",
"selected_index": 0,
"show": true,
"show_border": false
},
"Cols": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": 12.018339,
"Y": -4.1869373
},
"Name": "rowid",
"Exe": "text",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 1,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 2,
"grid_y": 0,
"label": "2",
"multi_line": false,
"selection": true,
"show": false,
"show_border": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 11.971685,
"Y": -8.034534
},
"Name": "button",
"Exe": "button",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"background": 0,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"label": "Afternoon run",
"show": true,
"tooltip": ""
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 12.007719,
"Y": -6.102049
},
"Name": "context",
"Exe": "button",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"background": 1,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"label": "",
"show": true,
"tooltip": ""
},
"ShowCodeChat": false
}
],
"ShowCodeChat": false
},
{
"Pos": {
"X": 19.345564,
"Y": -3.3098464
},
"Name": "run_db",
"Exe": "db_file",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": true,
"grid_h": 1,
"grid_w": 12,
"grid_x": 2,
"grid_y": 0,
"init_sql": "CREATE TABLE IF NOT EXISTS activities (rowid INTEGER, date INTEGER, route BLOB, time INTEGER, distance INTEGER, title TEXT, place TEXT, description TEXT, type TEXT);\n",
"path": "apps/running/db.sqlite",
"selected_table": "activities",
"show": false,
"show_path": true,
"show_table_list": true,
"write": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 7.343951,
"Y": 3.6518664
},
"Name": "exe",
"Exe": "exe",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"show": true
},
"Subs": [
{
"Pos": {
"X": 7.343951,
"Y": 3.6518664
},
"Name": "build_list",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "Copy table \"activities\" from 'run_db' into 'list'.\nSet button label as title column.\nSet rowid label as rowid column.",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"strconv\"\n)\n\nfunc build_list(db *Db_file, list *ListList) error {\n\tconnection, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer connection.Close()\n\n\trows, err := connection.Query(\"SELECT rowid, title FROM activities\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar rowid int\n\t\tvar title string\n\n\t\terr = rows.Scan(\u0026rowid, \u0026title)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tnewRow := list.AddRow()\n\t\tnewRow.Rowid.Label = strconv.Itoa(rowid)\n\t\tnewRow.Button.Label = title\n\t}\n\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"strconv\"\n)\n\nfunc build_list(run_db *Db_file, list *ListList) error {\n\tconnection, err := sql.Open(\"sqlite3\", run_db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer connection.Close()\n\n\trows, err := connection.Query(\"SELECT rowid, title FROM activities\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar rowid int\n\t\tvar title string\n\n\t\terr = rows.Scan(\u0026rowid, \u0026title)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tnewRow := list.AddRow()\n\t\tnewRow.Rowid.Label = strconv.Itoa(rowid)\n\t\tnewRow.Button.Label = title\n\t}\n\n\treturn nil\n}\n",
"ArgsProps": null
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 14.343951,
"Y": 3.6518664
},
"Name": "update_details",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "Get run data from 'run_db'. Use rowid from 'list' selected row.\nMatch columns into 'title', 'typee'(type column) and 'mapp'(route column).",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc update_details(db *Db_file, list *ListList, title *EditboxDB, typee *ComboDB, mapp *Map) error {\n\tselectedRow := list.GetSelectedRow()\n\tif selectedRow == nil {\n\t\treturn fmt.Errorf(\"no row selected\")\n\t}\n\n\tdatabase, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer database.Close()\n\n\tquery := \"SELECT title, type, route FROM activities WHERE rowid = ?\"\n\tstmt, err := database.Prepare(query)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\tvar titleLabel string\n\tvar typeLabel string\n\tvar routeBlob []byte\n\terr = stmt.QueryRow(selectedRow.Rowid.Label).Scan(\u0026titleLabel, \u0026typeLabel, \u0026routeBlob)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttitle.SetValue(db.Path, \"activities\", \"title\", 0)\n\ttitle.Value = titleLabel\n\n\ttypee.SetValue(db.Path, \"activities\", \"type\", 0)\n\ttypee.Value = typeLabel\n\n\tmapp.Segments = string(routeBlob)\n\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc update_details(run_db *Db_file, list *ListList, title *EditboxDB, typee *ComboDB, mapp *Map) error {\n\tselectedRow := list.GetSelectedRow()\n\tif selectedRow == nil {\n\t\treturn nil\n\t}\n\n\trowID, _ := strconv.Atoi(selectedRow.Rowid.Label)\n\n\tdatabase, err := sql.Open(\"sqlite3\", run_db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer database.Close()\n\n\tvar routeBlob []byte\n\tquery := `SELECT route FROM activities WHERE rowid = ?`\n\terr = database.QueryRow(query, rowID).Scan(\u0026routeBlob)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttitle.SetValue(run_db.Path, \"activities\", \"title\", rowID)\n\ttypee.SetValue(run_db.Path, \"activities\", \"type\", rowID)\n\tmapp.Segments = string(routeBlob)\n\n\treturn nil\n}\n",
"ArgsProps": null
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 21.830437,
"Y": 3.6518664
},
"Name": "update_elev_chart",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "Get run data from 'run_db'. Use rowid from 'list' selected row.\nBlob from route column is GPX file.\nConvert GPX into 'elev_chart'. Set elevations as \"y\". Compute distance(int km) from beginning and set it as \"x\".",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"math\"\n)\n\ntype GPX struct {\n\tTrk []struct {\n\t\tTrkSeg []struct {\n\t\t\tTrkPt []struct {\n\t\t\t\tLat  float64 `xml:\"lat,attr\"`\n\t\t\t\tLon  float64 `xml:\"lon,attr\"`\n\t\t\t\tEle  float64 `xml:\"ele\"`\n\t\t\t\tTime string  `xml:\"time\"`\n\t\t\t} `xml:\"trkpt\"`\n\t\t} `xml:\"trkseg\"`\n\t} `xml:\"trk\"`\n}\n\nfunc update_elev_chart(run_db *Db_file, list *ListList, elev_chart *Chart) error {\n\tdb, err := sql.Open(\"sqlite3\", run_db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer db.Close()\n\n\tselectedRow := list.GetSelectedRow()\n\tif selectedRow == nil {\n\t\treturn fmt.Errorf(\"no selected row\")\n\t}\n\n\tvar routeBlob []byte\n\terr = db.QueryRow(\"SELECT route FROM activities WHERE rowid = ?\", selectedRow.Rowid.Label).Scan(\u0026routeBlob)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar gpx GPX\n\terr = xml.Unmarshal(routeBlob, \u0026gpx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar chartItems []ChartItem\n\tvar totalDistance float64 = 0\n\n\tfor i, seg := range gpx.Trk[0].TrkSeg {\n\t\tfor j, pt := range seg.TrkPt {\n\t\t\tif i \u003e 0 || j \u003e 0 {\n\t\t\t\tprevPt := gpx.Trk[0].TrkSeg[i].TrkPt[j-1]\n\t\t\t\tif j == 0 \u0026\u0026 i \u003e 0 { // handle first point of the new segment\n\t\t\t\t\tprevSeg := gpx.Trk[0].TrkSeg[i-1]\n\t\t\t\t\tprevPt = prevSeg.TrkPt[len(prevSeg.TrkPt)-1]\n\t\t\t\t}\n\t\t\t\tdistance := haversine(prevPt.Lon, prevPt.Lat, pt.Lon, pt.Lat)\n\t\t\t\ttotalDistance += distance\n\t\t\t}\n\n\t\t\tchartItems = append(chartItems, ChartItem{\n\t\t\t\tX: totalDistance,\n\t\t\t\tY: pt.Ele,\n\t\t\t})\n\t\t}\n\t}\n\n\tchartJSON, err := json.Marshal(chartItems)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\telev_chart.Values = string(chartJSON)\n\telev_chart.Enable = true\n\n\treturn nil\n}\n\nfunc haversine(lonFrom, latFrom, lonTo, latTo float64) float64 {\n\tvar deltaLat = (latTo - latFrom) * (math.Pi / 180.0)\n\tvar deltaLon = (lonTo - lonFrom) * (math.Pi / 180.0)\n\tvar a = math.Sin(deltaLat/2)*math.Sin(deltaLat/2) +\n\t\tmath.Cos(latFrom*(math.Pi/180.0))*math.Cos(latTo*(math.Pi/180.0))*\n\t\t\tmath.Sin(deltaLon/2)*math.Sin(deltaLon/2)\n\tvar c = 2 * math.Atan2(math.Sqrt(a), math.Sqrt(1-a))\n\tconst EarthRadius = 6371 // km\n\treturn EarthRadius * c\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"math\"\n)\n\nfunc update_elev_chart(run_db *Db_file, list *ListList, elev_chart *Chart) error {\n\tdb, err := sql.Open(\"sqlite3\", run_db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer db.Close()\n\n\tselectedRow := list.GetSelectedRow()\n\tif selectedRow == nil {\n\t\treturn fmt.Errorf(\"no selected row\")\n\t}\n\n\tvar routeBlob []byte\n\terr = db.QueryRow(\"SELECT route FROM activities WHERE rowid = ?\", selectedRow.Rowid.Label).Scan(\u0026routeBlob)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ntype GPX struct {\n\tTrk []struct {\n\t\tTrkSeg []struct {\n\t\t\tTrkPt []struct {\n\t\t\t\tLat  float64 `xml:\"lat,attr\"`\n\t\t\t\tLon  float64 `xml:\"lon,attr\"`\n\t\t\t\tEle  float64 `xml:\"ele\"`\n\t\t\t\tTime string  `xml:\"time\"`\n\t\t\t} `xml:\"trkpt\"`\n\t\t} `xml:\"trkseg\"`\n\t} `xml:\"trk\"`\n}\n\n\tvar gpx GPX\n\terr = xml.Unmarshal(routeBlob, \u0026gpx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar chartItems []ChartItem\n\tvar totalDistance float64 = 0\n\n\tfor i, seg := range gpx.Trk[0].TrkSeg {\n\t\tfor j, pt := range seg.TrkPt {\n\t\t\tif i \u003e 0 || j \u003e 0 {\n\t\t\t\tprevPt := gpx.Trk[0].TrkSeg[i].TrkPt[j-1]\n\t\t\t\tif j == 0 \u0026\u0026 i \u003e 0 { // handle first point of the new segment\n\t\t\t\t\tprevSeg := gpx.Trk[0].TrkSeg[i-1]\n\t\t\t\t\tprevPt = prevSeg.TrkPt[len(prevSeg.TrkPt)-1]\n\t\t\t\t}\n\t\t\t\tdistance := haversine(prevPt.Lon, prevPt.Lat, pt.Lon, pt.Lat)\n\t\t\t\ttotalDistance += distance\n\t\t\t}\n\n\t\t\tchartItems = append(chartItems, ChartItem{\n\t\t\t\tX: totalDistance,\n\t\t\t\tY: pt.Ele,\n\t\t\t})\n\t\t}\n\t}\n\n\tchartJSON, err := json.Marshal(chartItems)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\telev_chart.Values = string(chartJSON)\n\telev_chart.Enable = true\n\n\treturn nil\n}\n\nfunc haversine(lonFrom, latFrom, lonTo, latTo float64) float64 {\n\tvar deltaLat = (latTo - latFrom) * (math.Pi / 180.0)\n\tvar deltaLon = (lonTo - lonFrom) * (math.Pi / 180.0)\n\tvar a = math.Sin(deltaLat/2)*math.Sin(deltaLat/2) +\n\t\tmath.Cos(latFrom*(math.Pi/180.0))*math.Cos(latTo*(math.Pi/180.0))*\n\t\t\tmath.Sin(deltaLon/2)*math.Sin(deltaLon/2)\n\tvar c = 2 * math.Atan2(math.Sqrt(a), math.Sqrt(1-a))\n\tconst EarthRadius = 6371 // km\n\treturn EarthRadius * c\n}\n",
"ArgsProps": null
},
"Attrs": {
"bypass": false,
"show": true
},
"ShowCodeChat": false
}
],
"ShowCodeChat": false
}
],
"ShowCodeChat": false
}