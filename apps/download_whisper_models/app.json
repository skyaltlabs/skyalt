{
"Pos": {
"X": 0,
"Y": 0
},
"Name": "root",
"Exe": "layout",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"grid_h": 0,
"grid_w": 0,
"grid_x": 0,
"grid_y": 0,
"show": true
},
"Cols": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 10,
"Resize": 1
},
{
"Pos": 2,
"Min": 1,
"Max": 100,
"Resize": 1
}
],
"Rows": [
{
"Pos": 0,
"Min": 1,
"Max": 1,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 1,
"Resize": 1
},
{
"Pos": 2,
"Min": 1,
"Max": 11,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": -3.7866805,
"Y": 7.3052344
},
"Name": "table",
"Exe": "list",
"Code": {
"Messages": [
{
"User": "Clear 'table' and copy table \"Link\" from 'db' into 'table'.\nSet \"size\" column as \u003cvalue\u003e+\"MB\".",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc table(table *ListTable, db *Db_file) error {\n\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\trows, err := conn.Query(\"SELECT model, size FROM links\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar model string\n\t\tvar size int\n\t\t\n\t\terr = rows.Scan(\u0026model, \u0026size)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\trow := table.AddRow()\n\t\trow.Model.Label = model\n\t\trow.Size.Label = fmt.Sprintf(\"%dMB\", size)\n\t}\n\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "func table() error {\n\treturn nil\n}",
"ArgsProps": [
{
"Node": "db_file",
"Write": false
}
]
},
"Attrs": {
"changed": false,
"defRow": {
"button": {
"background": 1,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 2,
"grid_y": 0,
"icon": "",
"icon_margin": 0,
"label": "Download",
"show": true,
"tooltip": "",
"triggered": false
},
"model": {
"align_h": 0,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"label": "name",
"line_wrapping": false,
"multi_line": false,
"selection": true,
"show": true,
"show_border": false
},
"size": {
"align_h": 0,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"label": "size",
"line_wrapping": false,
"multi_line": false,
"selection": true,
"show": true,
"show_border": false
}
},
"direction": 0,
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 2,
"max_height": 1,
"max_width": 100,
"selected_button": "",
"selected_index": 0,
"show": true,
"show_border": true
},
"Cols": [
{
"Pos": 0,
"Min": 1,
"Max": 100,
"Resize": 1
},
{
"Pos": 1,
"Min": 1,
"Max": 3,
"Resize": 1
},
{
"Pos": 2,
"Min": 1,
"Max": 4,
"Resize": 1
}
],
"Rows": [
{
"Pos": 0,
"Min": 1,
"Max": 1,
"Resize": 1
}
],
"Subs": [
{
"Pos": {
"X": -5.08226,
"Y": 6.713856
},
"Name": "model",
"Exe": "text",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 0,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"label": "name",
"multi_line": false,
"selection": true,
"show": true,
"show_border": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 3.9658945,
"Y": 6.74807
},
"Name": "button",
"Exe": "button",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"background": 1,
"confirmation": "",
"enable": true,
"grid_h": 1,
"grid_w": 1,
"grid_x": 2,
"grid_y": 0,
"label": "Download",
"show": true,
"tooltip": ""
},
"ShowCodeChat": false
},
{
"Pos": {
"X": -0.64718664,
"Y": 6.6707544
},
"Name": "size",
"Exe": "text",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"align_h": 0,
"align_v": 1,
"grid_h": 1,
"grid_w": 1,
"grid_x": 1,
"grid_y": 0,
"label": "size",
"multi_line": false,
"selection": true,
"show": true,
"show_border": false
},
"ShowCodeChat": false
}
],
"ShowCodeChat": true
},
{
"Pos": {
"X": 9.599422,
"Y": 5.88535
},
"Name": "net",
"Exe": "net",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"file_path": "",
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"node": "",
"show": true,
"url": "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/"
},
"ShowCodeChat": false
},
{
"Pos": {
"X": 12.075288,
"Y": 7.680182
},
"Name": "dir",
"Exe": "disk_dir",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": false,
"grid_h": 1,
"grid_w": 1,
"grid_x": 0,
"grid_y": 0,
"path": "services/whisper.cpp/models/",
"show": false,
"write": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": -6.029992,
"Y": 9.849707
},
"Name": "db",
"Exe": "db_file",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"enable": true,
"grid_h": 6,
"grid_w": 12,
"grid_x": 0,
"grid_y": 11,
"init_sql": "CREATE TABLE IF NOT EXISTS links (url TEXT);\nCREATE TABLE IF NOT EXISTS abc (firstColumn TEXT);\n",
"path": "apps/download_whisper_models/db.sqlite",
"selected_table": "links",
"show": false,
"show_path": true,
"show_table_list": true,
"write": false
},
"ShowCodeChat": false
},
{
"Pos": {
"X": -1.644144,
"Y": 14.864865
},
"Name": "exe",
"Exe": "exe",
"Code": {
"Messages": null,
"Code": "",
"ArgsProps": null
},
"Attrs": {
"show": true
},
"Subs": [
{
"Pos": {
"X": -1.644144,
"Y": 14.864865
},
"Name": "init_table",
"Exe": "code",
"Code": {
"Messages": [
{
"User": "Clear 'table' and copy table \"Link\" from 'db' into 'table'.\nSet \"size\" column as \u003cvalue\u003e+\"MB\".",
"Assistent": "```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc init_table(table *ListTable, db *Db_file) error {\n\ttable.Rows = nil // Clearing the existing table\n\n\t// Open the SQLite database\n\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\t// Execute a query to get all the links\n\trows, err := conn.Query(\"SELECT model, size FROM links\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar model string\n\t\tvar size int\n\t\terr = rows.Scan(\u0026model, \u0026size)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Append each row to the table\n\t\tnewRow := table.AddRow()\n\t\tnewRow.Model.Label = model\n\t\tnewRow.Size.Label = fmt.Sprintf(\"%dMB\", size)\n\t}\n\n\treturn rows.Err() // In case of any iteration error\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc init_table(table *ListTable, db *Db_file) error {\n\ttable.Rows = nil // Clearing the existing table\n\n\t// Open the SQLite database\n\tconn, err := sql.Open(\"sqlite3\", db.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\t// Execute a query to get all the links\n\trows, err := conn.Query(\"SELECT model, size FROM links\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar model string\n\t\tvar size int\n\t\terr = rows.Scan(\u0026model, \u0026size)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Append each row to the table\n\t\tnewRow := table.AddRow()\n\t\tnewRow.Model.Label = model\n\t\tnewRow.Size.Label = fmt.Sprintf(\"%dMB\", size)\n\t}\n\n\treturn rows.Err() // In case of any iteration error\n}\n",
"ArgsProps": [
{
"Node": "table",
"Write": false
},
{
"Node": "db_file",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
},
{
"Pos": {
"X": 5.355856,
"Y": 14.864865
},
"Name": "update_table",
"Exe": "code",
"Selected": true,
"Code": {
"Messages": [
{
"User": "Go through 'table' and check if model + \".bin\" exist in 'dir'.\nIf it exists, set button label to \"Delete\", else \"Download\".\nIf it exists, set button confirmation to \"Are you sure?\".\nIf \"Delete\" is clicked, delete the file, else download it from 'net' with address(model + \".bin)\" and save it into 'dir'.",
"Assistent": "```go\nimport (\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc update_table(table *ListTable, dir *Disk_dir, net *Net) error {\n\tfor _, row := range table.Rows {\n\t\tfilePath := filepath.Join(dir.Path, row.Model.Label+\".bin\")\n\t\tif _, err := os.Stat(filePath); err == nil {\n\t\t\trow.Button.Label = \"Delete\"\n\t\t\trow.Button.Confirmation = \"Are you sure?\"\n\t\t\tif row.Button.Triggered {\n\t\t\t\terr := os.Remove(filePath)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\trow.Button.Triggered = false\n\t\t\t}\n\t\t} else {\n\t\t\trow.Button.Label = \"Download\"\n\t\t\tif row.Button.Triggered {\n\t\t\t\terr := net.DownloadFile(filePath, row.Model.Label+\".bin\")\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\trow.Button.Triggered = false\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n```"
},
{
"User": "",
"Assistent": ""
}
],
"Code": "\nimport (\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc update_table(table *ListTable, dir *Disk_dir, net *Net) error {\n\tfor _, row := range table.Rows {\n\t\tfilePath := filepath.Join(dir.Path, row.Model.Label+\".bin\")\n\t\tif _, err := os.Stat(filePath); err == nil {\n\t\t\trow.Button.Label = \"Delete\"\n\t\t\trow.Button.Confirmation = \"Are you sure?\"\n\t\t\tif row.Button.Triggered {\n\t\t\t\terr := os.Remove(filePath)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\trow.Button.Triggered = false\n\t\t\t}\n\t\t} else {\n\t\t\trow.Button.Label = \"Download\"\n\t\t\tif row.Button.Triggered {\n\t\t\t\terr := net.DownloadFile(filePath, row.Model.Label+\".bin\")\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\trow.Button.Triggered = false\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n",
"ArgsProps": [
{
"Node": "table",
"Write": false
},
{
"Node": "dir",
"Write": false
},
{
"Node": "net",
"Write": false
}
]
},
"Attrs": {
"bypass": false,
"language": "go",
"show": true
},
"ShowCodeChat": true
}
],
"ShowCodeChat": false
}
],
"ShowCodeChat": false
}